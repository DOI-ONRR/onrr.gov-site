{"version":3,"file":"js/ExpansionPanelBlock.01b03537.js","mappings":"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","sources":["webpack://onrr-frontend-app-vue/./src/components/blocks/ExpansionPanelBlock.vue?ae0d","webpack://onrr-frontend-app-vue/src/components/blocks/ExpansionPanelBlock.vue","webpack://onrr-frontend-app-vue/./src/components/blocks/ExpansionPanelBlock.vue?6797","webpack://onrr-frontend-app-vue/../../../src/components/VExpansionPanel/VExpansionPanel.ts","webpack://onrr-frontend-app-vue/../../../src/components/VExpansionPanel/VExpansionPanelContent.ts","webpack://onrr-frontend-app-vue/../../../src/components/VExpansionPanel/VExpansionPanelHeader.ts","webpack://onrr-frontend-app-vue/../../../src/components/VExpansionPanel/VExpansionPanels.ts","webpack://onrr-frontend-app-vue/./src/components/blocks/ExpansionPanelBlock.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"pa-1\",attrs:{\"id\":\"foo-bar\"}},[_c('v-expansion-panels',{attrs:{\"accordion\":\"\",\"value\":_vm.openedPanel}},_vm._l((_vm.blockItems),function(block,i){return _c('v-expansion-panel',{key:i,staticClass:\"mb-4\",attrs:{\"disable-icon-rotate\":\"\"},on:{\"click\":function($event){_vm.addParamsToLocation({ panel: _vm.formattedLabel(block.item.block_label)  })}}},[_c('v-expansion-panel-header',{ref:_vm.formattedLabel(block.item.block_label),refInFor:true,attrs:{\"color\":\"expansionPanel\"},scopedSlots:_vm._u([{key:\"actions\",fn:function(){return [_c('v-icon',{staticClass:\"v-icon-plus\",attrs:{\"color\":\"secondary\"}},[_vm._v(\" mdi-plus-box \")]),_c('v-icon',{staticClass:\"v-icon-minus\",attrs:{\"color\":\"secondary\"}},[_vm._v(\" mdi-minus-box \")])]},proxy:true}],null,true)},[_vm._v(\" \"+_vm._s(block.item.block_label)+\" \")]),_c('v-expansion-panel-content',{staticClass:\"pt-4\"},[_c('LayoutBlock',{attrs:{\"layoutBlocks\":block.panelBlocks}})],1)],1)}),1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n    <div class=\"pa-1\" id=\"foo-bar\">\n        <v-expansion-panels\n            accordion\n            :value=\"openedPanel\">\n            <v-expansion-panel\n            v-for=\"(block,i) in blockItems\"\n            :key=\"i\"\n            class=\"mb-4\"\n            disable-icon-rotate\n            @click=\"addParamsToLocation({ panel: formattedLabel(block.item.block_label)  })\"\n            >\n            <v-expansion-panel-header \n                :ref=\"formattedLabel(block.item.block_label)\"\n                color=\"expansionPanel\">\n                {{ block.item.block_label }}\n                <template v-slot:actions>\n                    <v-icon color=\"secondary\" class=\"v-icon-plus\">\n                       mdi-plus-box\n                    </v-icon>\n                    <v-icon color=\"secondary\" class=\"v-icon-minus\">\n                       mdi-minus-box\n                    </v-icon>\n                </template>\n            </v-expansion-panel-header>\n            <v-expansion-panel-content class=\"pt-4\">\n                <LayoutBlock :layoutBlocks=\"block.panelBlocks\"></LayoutBlock>\n            </v-expansion-panel-content>\n            </v-expansion-panel>\n        </v-expansion-panels>\n    </div>\n    \n</template>\n\n<script>\nimport { formatToSlug } from '@/js/utils'\nconst LayoutBlock = () => import(/* webpackChunkName: \"LayoutBlock\" */ '@/components/blocks/LayoutBlock')\n\nimport { \n  pageBlockMixin,\n  editorBlockMixin\n} from '@/mixins'\nexport default {\n    mixins: [pageBlockMixin, editorBlockMixin],\n    name: 'ExpansionPanelBlock',\n    data() {\n        return {\n            panels: [],\n            panelQueryParamExists: false\n        }\n    },\n    props: {\n        block: [Array, Object],\n    },\n    components: {\n        LayoutBlock\n    },\n    methods: {\n        getAllIndexes(arr, val) {\n            const indexes = []\n            let i = -1\n            while ((i = arr.indexOf(val, i+1)) != -1){\n                indexes.push(i)\n            }\n            return indexes\n        },\n        addParamsToLocation(params) {\n            setTimeout(() => {\n                const query = { path: this.$route.fullPath, ...this.$route.query, query: params }\n                this.$router.push(query).catch(() => {})\n            }, 0);\n            \n        },\n        formattedLabel(label) {\n            return formatToSlug(label)\n        },\n        formattedLabelsArr() {\n            const panelsArr = this.panels\n            return panelsArr.map(block => this.formattedLabel(block.item.block_label))\n        }\n        \n    },\n    computed: {\n        blockItems() {\n            const blocks = this.block.item.expansion_panel_blocks\n            const blockItems = []\n\n            blocks && blocks.forEach(obj => {\n                if(obj.item !== null) {\n                    if (obj && obj.item.__typename === 'expansion_panel_block_label') {\n                        this.panels.push(obj)\n                        blockItems.push({ ...obj, panelBlocks: [] })\n                    } else {\n                        blockItems[blockItems.length - 1].panelBlocks.push(obj)\n                    }\n                }\n            })\n            return blockItems\n        },\n        openedPanel() {\n            const defaultBlockId = this.block.item.open_by_default?.id\n            let formattedLabelArr = this.formattedLabelsArr()\n            let openedId\n\n            if (this.$route.query.panel) {\n                openedId = formattedLabelArr.findIndex(block => block === this.$route.query.panel)\n            } else {\n                if (defaultBlockId) {\n                    openedId = this.panels.findIndex(block => block.item.id === defaultBlockId)\n                }\n            }\n            return openedId\n        }\n    },\n    created() {\n        // this.openedPanel()\n    },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.v-expansion-panel-header {\n    font-size: 1.2rem;\n    font-weight: bold;\n}\n\n.v-icon {\n    color: var(--v-secondary-base) !important;\n}\n\n.v-expansion-panel-header .v-icon-minus {\n    display: none;\n}\n\n.v-expansion-panel-header.v-expansion-panel-header--active .v-icon-plus {\n    display: none;\n}\n\n.v-expansion-panel-header.v-expansion-panel-header--active .v-icon-minus {\n    display: block;\n}\n\n\n</style>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-39[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ExpansionPanelBlock.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-39[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ExpansionPanelBlock.vue?vue&type=script&lang=js&\"","// Components\nimport VExpansionPanels from './VExpansionPanels'\nimport VExpansionPanelHeader from './VExpansionPanelHeader'\nimport VExpansionPanelContent from './VExpansionPanelContent'\n\n// Mixins\nimport { factory as GroupableFactory } from '../../mixins/groupable'\nimport { provide as RegistrableProvide } from '../../mixins/registrable'\n\n// Utilities\nimport { getSlot } from '../../util/helpers'\nimport mixins from '../../util/mixins'\n\n// Types\nimport { VNode } from 'vue'\n\ntype VExpansionPanelHeaderInstance = InstanceType<typeof VExpansionPanelHeader>\ntype VExpansionPanelContentInstance = InstanceType<typeof VExpansionPanelContent>\n\nexport default mixins(\n  GroupableFactory<'expansionPanels', typeof VExpansionPanels>('expansionPanels', 'v-expansion-panel', 'v-expansion-panels'),\n  RegistrableProvide('expansionPanel', true)\n  /* @vue/component */\n).extend({\n  name: 'v-expansion-panel',\n\n  props: {\n    disabled: Boolean,\n    readonly: Boolean,\n  },\n\n  data () {\n    return {\n      content: null as VExpansionPanelContentInstance | null,\n      header: null as VExpansionPanelHeaderInstance | null,\n      nextIsActive: false,\n    }\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        'v-expansion-panel--active': this.isActive,\n        'v-expansion-panel--next-active': this.nextIsActive,\n        'v-expansion-panel--disabled': this.isDisabled,\n        ...this.groupClasses,\n      }\n    },\n    isDisabled (): boolean {\n      return this.expansionPanels.disabled || this.disabled\n    },\n    isReadonly (): boolean {\n      return this.expansionPanels.readonly || this.readonly\n    },\n  },\n\n  methods: {\n    registerContent (vm: VExpansionPanelContentInstance) {\n      this.content = vm\n    },\n    unregisterContent () {\n      this.content = null\n    },\n    registerHeader (vm: VExpansionPanelHeaderInstance) {\n      this.header = vm\n      vm.$on('click', this.onClick)\n    },\n    unregisterHeader () {\n      this.header = null\n    },\n    onClick (e: MouseEvent) {\n      if (e.detail) this.header!.$el.blur()\n\n      this.$emit('click', e)\n\n      this.isReadonly || this.isDisabled || this.toggle()\n    },\n    toggle () {\n      this.$nextTick(() => this.$emit('change'))\n    },\n  },\n\n  render (h): VNode {\n    return h('div', {\n      staticClass: 'v-expansion-panel',\n      class: this.classes,\n      attrs: {\n        'aria-expanded': String(this.isActive),\n      },\n    }, getSlot(this))\n  },\n})\n","// Components\nimport VExpansionPanel from './VExpansionPanel'\nimport { VExpandTransition } from '../transitions'\n\n// Mixins\nimport Bootable from '../../mixins/bootable'\nimport Colorable from '../../mixins/colorable'\nimport { inject as RegistrableInject } from '../../mixins/registrable'\n\n// Utilities\nimport { getSlot } from '../../util/helpers'\nimport mixins, { ExtractVue } from '../../util/mixins'\n\n// Types\nimport Vue, { VNode, VueConstructor } from 'vue'\n\nconst baseMixins = mixins(\n  Bootable,\n  Colorable,\n  RegistrableInject<'expansionPanel', VueConstructor<Vue>>('expansionPanel', 'v-expansion-panel-content', 'v-expansion-panel')\n)\n\ninterface options extends ExtractVue<typeof baseMixins> {\n  expansionPanel: InstanceType<typeof VExpansionPanel>\n}\n\n/* @vue/component */\nexport default baseMixins.extend<options>().extend({\n  name: 'v-expansion-panel-content',\n\n  data: () => ({\n    isActive: false,\n  }),\n\n  computed: {\n    parentIsActive (): boolean {\n      return this.expansionPanel.isActive\n    },\n  },\n\n  watch: {\n    parentIsActive: {\n      immediate: true,\n      handler (val, oldVal) {\n        if (val) this.isBooted = true\n\n        if (oldVal == null) this.isActive = val\n        else this.$nextTick(() => this.isActive = val)\n      },\n    },\n  },\n\n  created () {\n    this.expansionPanel.registerContent(this)\n  },\n\n  beforeDestroy () {\n    this.expansionPanel.unregisterContent()\n  },\n\n  render (h): VNode {\n    return h(VExpandTransition, this.showLazyContent(() => [\n      h('div', this.setBackgroundColor(this.color, {\n        staticClass: 'v-expansion-panel-content',\n        directives: [{\n          name: 'show',\n          value: this.isActive,\n        }],\n      }), [\n        h('div', { class: 'v-expansion-panel-content__wrap' }, getSlot(this)),\n      ]),\n    ]))\n  },\n})\n","// Components\nimport { VFadeTransition } from '../transitions'\nimport VExpansionPanel from './VExpansionPanel'\nimport VIcon from '../VIcon'\n\n// Mixins\nimport Colorable from '../../mixins/colorable'\nimport { inject as RegistrableInject } from '../../mixins/registrable'\n\n// Directives\nimport ripple from '../../directives/ripple'\n\n// Utilities\nimport { getSlot } from '../../util/helpers'\nimport mixins, { ExtractVue } from '../../util/mixins'\n\n// Types\nimport Vue, { VNode, VueConstructor } from 'vue'\n\nconst baseMixins = mixins(\n  Colorable,\n  RegistrableInject<'expansionPanel', VueConstructor<Vue>>('expansionPanel', 'v-expansion-panel-header', 'v-expansion-panel')\n)\n\ninterface options extends ExtractVue<typeof baseMixins> {\n  $el: HTMLElement\n  expansionPanel: InstanceType<typeof VExpansionPanel>\n}\n\nexport default baseMixins.extend<options>().extend({\n  name: 'v-expansion-panel-header',\n\n  directives: { ripple },\n\n  props: {\n    disableIconRotate: Boolean,\n    expandIcon: {\n      type: String,\n      default: '$expand',\n    },\n    hideActions: Boolean,\n    ripple: {\n      type: [Boolean, Object],\n      default: false,\n    },\n  },\n\n  data: () => ({\n    hasMousedown: false,\n  }),\n\n  computed: {\n    classes (): object {\n      return {\n        'v-expansion-panel-header--active': this.isActive,\n        'v-expansion-panel-header--mousedown': this.hasMousedown,\n      }\n    },\n    isActive (): boolean {\n      return this.expansionPanel.isActive\n    },\n    isDisabled (): boolean {\n      return this.expansionPanel.isDisabled\n    },\n    isReadonly (): boolean {\n      return this.expansionPanel.isReadonly\n    },\n  },\n\n  created () {\n    this.expansionPanel.registerHeader(this)\n  },\n\n  beforeDestroy () {\n    this.expansionPanel.unregisterHeader()\n  },\n\n  methods: {\n    onClick (e: MouseEvent) {\n      this.$emit('click', e)\n    },\n    genIcon () {\n      const icon = getSlot(this, 'actions') ||\n        [this.$createElement(VIcon, this.expandIcon)]\n\n      return this.$createElement(VFadeTransition, [\n        this.$createElement('div', {\n          staticClass: 'v-expansion-panel-header__icon',\n          class: {\n            'v-expansion-panel-header__icon--disable-rotate': this.disableIconRotate,\n          },\n          directives: [{\n            name: 'show',\n            value: !this.isDisabled,\n          }],\n        }, icon),\n      ])\n    },\n  },\n\n  render (h): VNode {\n    return h('button', this.setBackgroundColor(this.color, {\n      staticClass: 'v-expansion-panel-header',\n      class: this.classes,\n      attrs: {\n        tabindex: this.isDisabled ? -1 : null,\n        type: 'button',\n        'aria-expanded': this.isActive,\n      },\n      directives: [{\n        name: 'ripple',\n        value: this.ripple,\n      }],\n      on: {\n        ...this.$listeners,\n        click: this.onClick,\n        mousedown: () => (this.hasMousedown = true),\n        mouseup: () => (this.hasMousedown = false),\n      },\n    }), [\n      getSlot(this, 'default', { open: this.isActive }, true),\n      this.hideActions || this.genIcon(),\n    ])\n  },\n})\n","// Styles\nimport './VExpansionPanel.sass'\n\n// Components\nimport { BaseItemGroup, GroupableInstance } from '../VItemGroup/VItemGroup'\nimport VExpansionPanel from './VExpansionPanel'\n\n// Utilities\nimport { breaking } from '../../util/console'\n\n// Types\ninterface VExpansionPanelInstance extends InstanceType<typeof VExpansionPanel> {}\n\n/* @vue/component */\nexport default BaseItemGroup.extend({\n  name: 'v-expansion-panels',\n\n  provide (): object {\n    return {\n      expansionPanels: this,\n    }\n  },\n\n  props: {\n    accordion: Boolean,\n    disabled: Boolean,\n    flat: Boolean,\n    hover: Boolean,\n    focusable: Boolean,\n    inset: Boolean,\n    popout: Boolean,\n    readonly: Boolean,\n    tile: Boolean,\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...BaseItemGroup.options.computed.classes.call(this),\n        'v-expansion-panels': true,\n        'v-expansion-panels--accordion': this.accordion,\n        'v-expansion-panels--flat': this.flat,\n        'v-expansion-panels--hover': this.hover,\n        'v-expansion-panels--focusable': this.focusable,\n        'v-expansion-panels--inset': this.inset,\n        'v-expansion-panels--popout': this.popout,\n        'v-expansion-panels--tile': this.tile,\n      }\n    },\n  },\n\n  created () {\n    /* istanbul ignore next */\n    if (this.$attrs.hasOwnProperty('expand')) {\n      breaking('expand', 'multiple', this)\n    }\n\n    /* istanbul ignore next */\n    if (\n      Array.isArray(this.value) &&\n      this.value.length > 0 &&\n      typeof this.value[0] === 'boolean'\n    ) {\n      breaking(':value=\"[true, false, true]\"', ':value=\"[0, 2]\"', this)\n    }\n  },\n\n  methods: {\n    updateItem (item: GroupableInstance & VExpansionPanelInstance, index: number) {\n      const value = this.getValue(item, index)\n      const nextValue = this.getValue(item, index + 1)\n\n      item.isActive = this.toggleMethod(value)\n      item.nextIsActive = this.toggleMethod(nextValue)\n    },\n  },\n})\n","import { render, staticRenderFns } from \"./ExpansionPanelBlock.vue?vue&type=template&id=f86ba1a4&scoped=true&\"\nimport script from \"./ExpansionPanelBlock.vue?vue&type=script&lang=js&\"\nexport * from \"./ExpansionPanelBlock.vue?vue&type=script&lang=js&\"\nimport style0 from \"./ExpansionPanelBlock.vue?vue&type=style&index=0&id=f86ba1a4&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"f86ba1a4\",\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VExpansionPanel } from 'vuetify/lib/components/VExpansionPanel';\nimport { VExpansionPanelContent } from 'vuetify/lib/components/VExpansionPanel';\nimport { VExpansionPanelHeader } from 'vuetify/lib/components/VExpansionPanel';\nimport { VExpansionPanels } from 'vuetify/lib/components/VExpansionPanel';\nimport { VIcon } from 'vuetify/lib/components/VIcon';\ninstallComponents(component, {VExpansionPanel,VExpansionPanelContent,VExpansionPanelHeader,VExpansionPanels,VIcon})\n"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","attrs","openedPanel","_l","block","i","key","on","$event","addParamsToLocation","panel","formattedLabel","item","block_label","ref","refInFor","scopedSlots","_u","fn","_v","proxy","_s","panelBlocks","staticRenderFns","LayoutBlock","mixins","name","panels","panelQueryParamExists","props","components","methods","getAllIndexes","indexes","setTimeout","path","query","computed","blocks","blockItems","openedId","GroupableFactory","RegistrableProvide","extend","disabled","Boolean","readonly","data","content","header","nextIsActive","classes","isActive","isDisabled","groupClasses","expansionPanels","isReadonly","registerContent","vm","unregisterContent","registerHeader","$on","onClick","unregisterHeader","e","detail","$el","blur","$emit","toggle","$nextTick","h","class","String","getSlot","baseMixins","Bootable","Colorable","RegistrableInject","parentIsActive","expansionPanel","watch","immediate","handler","val","oldVal","isBooted","created","beforeDestroy","VExpandTransition","showLazyContent","setBackgroundColor","color","directives","value","ripple","disableIconRotate","expandIcon","type","default","hideActions","Object","hasMousedown","genIcon","icon","VIcon","VFadeTransition","tabindex","$listeners","click","mousedown","mouseup","open","BaseItemGroup","provide","accordion","flat","hover","focusable","inset","popout","tile","$attrs","hasOwnProperty","breaking","Array","isArray","length","updateItem","index","getValue","nextValue","toggleMethod","component","VExpansionPanel"],"sourceRoot":""}