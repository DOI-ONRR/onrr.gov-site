version: 2.1
parameters:
  run_cms_updates:
    type: boolean
    default: false

orbs:
  node: circleci/node@4.1
  aws-s3: circleci/aws-s3@2.0.0

jobs:
  dev-onrr-frontend:
    working_directory: ~/onrr.gov-site/frontend
    docker:
      - image: cimg/node:16.16
    resource_class: xlarge
    steps:
      - checkout:
          path: ~/onrr.gov-site
      - node/install-packages

      - run:
          name: Build app
          command: |
            printenv
            cp nginx.conf.dev nginx.conf
            npm run dev
      - run:
          name: Deploy to cloud
          command: |
            pwd && ls -l
            wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
            echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
            sudo apt-get update
            sudo apt-get install cf8-cli
            cf login -u "$CF_USERNAME" -p "$CF_PASSWORD" -a api.fr.cloud.gov -o doi-onrr -s dev -v
            cf push -f development.manifest.yml
  preview-onrr-frontend:
    working_directory: ~/onrr.gov-site/frontend
    docker:
      - image: cimg/node:16.16
    resource_class: xlarge
    steps:
      - checkout:
          path: ~/onrr.gov-site
      - node/install-packages

      - run:
          name: Build app
          command: |
            printenv
            export NODE_ENV=production
            cp nginx.conf.preview nginx.conf
            npm run staging
      - run:
          name: Deploy to cloud.gov
          command: |
            pwd && ls -l
            printenv
            wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
            echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
            sudo apt-get update
            sudo apt-get install cf8-cli
            cf api https://api.fr.cloud.gov
            cf login -u "$CF_USERNAME" -p "$CF_PASSWORD" -a api.fr.cloud.gov -o doi-onrr -s dev -v
            cf push -f preview.manifest.yml
  prod-onrr-frontend:
    working_directory: ~/onrr.gov-site/frontend
    docker:
      - image: cimg/node:16.16
    resource_class: xlarge
    steps:
      - checkout:
          path: ~/onrr.gov-site
      - node/install-packages

      - run:
          name: Build app
          command: |
            cp nginx.conf.prod nginx.conf
            npm run production
      - run:
          name: Deploy to cloud.gov
          command: |
            pwd && ls -l
            wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
            echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
            sudo apt-get update
            sudo apt-get install cf8-cli
            cf api https://api.fr.cloud.gov
            cf login -u "$CF_USERNAME" -p "$CF_PASSWORD" -a api.fr.cloud.gov -o doi-onrr -s prod
            cf push -f ./prod.manifest.yml
  onrr-database:
    docker:
      - image: cimg/postgres:13.7
    steps:
      - checkout
      - run:
          name: "Update OS"
          command: sudo apt-get update
      - run:
          name: "dump dev db "
          command: |
           cd database
            wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
            echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
            sudo apt-get update
            sudo apt-get install cf8-cli
            cf api https://api.fr.cloud.gov
            cf auth "$CF_USERNAME" "$CF_PASSWORD"
            cf target -o "$CF_ORG" -s dev -v
            cf apps
            cf install-plugin -f https://github.com/cloud-gov/cf-service-connect/releases/download/1.1.0/cf-service-connect-linux-amd64
            bash tunnel.sh dev-onrr-psql dev-onrr-cms
            source ../../.tunnelrc
            pg_dump --user=$Username --host=$Host --port=$Port --dbname=$Name --verbose --no-acl --no-owner -Fc > /tmp/onrr_database_backup.pg | echo $s?
      - run:
          name: "restore prod db "
          command: |
            cd database
            cf api https://api.fr.cloud.gov
            cf auth "$CF_USERNAME" "$CF_PASSWORD"
            cf target -o "$CF_ORG" -s prod
            bash tunnel.sh onrr-psql prod-onrr-cms
            source ../../.tunnelrc
            pg_restore --user=$Username --host=$Host --port=$Port --clean  --no-owner --no-acl --dbname=$Name --no-password /tmp/onrr_database_backup.pg || echo $?
            echo "Database copied to production"
            echo "rebuild production site"
      - store_artifacts:
          path: /tmp/onrr_database_backup.pg
          destination: onrr_database_backup.pg


  update-cms:
    docker:
      - image: cimg/node:16.13
    steps:
      - checkout
      - run:
          name: Update cms and deploy to cloud.gov
          command: |
           cd cms
            wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
            echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
            sudo apt-get update
            sudo apt-get install cf8-cli
            cf api https://api.fr.cloud.gov
            cf auth "$CF_USERNAME" "$CF_PASSWORD"
            cf target -o "$CF_ORG" -s dev
            cf push dev-onrr-cms
workflows:
  build:
    jobs:
      - dev-onrr-frontend:
          context:
            - org-global
          filters:
            branches:
              only:
                - dev
      - preview-onrr-frontend:
          filters:
            branches:
              only:
                - foo
      - onrr-database:
          context:
            - org-global
          filters:
            branches:
              only:
                - main
      - prod-onrr-frontend:
          context:
            - org-global
          filters:
            branches:
              only:
                - main
  cms_updates:
    when: << pipeline.parameters.run_cms_updates >>
    jobs:
      - update-cms:
          context:
            - org-global
