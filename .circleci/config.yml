version: 2.1
parameters:
  run_cms_updates:
    type: boolean
    default: false

orbs:
  node: circleci/node@4.1
  aws-s3: circleci/aws-s3@2.0.0

jobs:
  dev-onrr-frontend:
    working_directory: ~/onrr.gov-site/frontend
    docker:
      - image: cimg/node:16.16
    steps:
      - checkout:
          path: ~/onrr.gov-site
      - node/install-packages

      - run: 
          name: Build app
          command: |
            cp nginx.conf.dev nginx.conf 
            npm run dev
          
      - run: 
          name: Build dev
          command: |
            pwd && ls -l
            curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&source=github'
            sudo dpkg -i cf-cli_amd64.deb  
            # Set $CF_USERNAME and $CF_PASSWORD in CircleCI settings.
            # $CF_ORG, $CF_SPACE, and $APP_NAME can also be set in CircleCI settings or hardcoded here.
            cf api https://api.fr.cloud.gov
            cf auth "$DEV_CF_USERNAME" "$DEV_CF_PASSWORD"
            cf target -o "$DEV_CF_ORG" -s "$DEV_CF_SPACE"
            cf push -f development.manifest.yml
      - run: 
          name: Build preview
          command: |
            cp nginx.conf.preview nginx.conf
            npm run staging 
          
      - run: 
          name: Deploy to cloud.gov
          command: |
            pwd && ls -l
            curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&source=github'
            sudo dpkg -i cf-cli_amd64.deb  
            # Set $CF_USERNAME and $CF_PASSWORD in CircleCI settings.
            # $CF_ORG, $CF_SPACE, and $APP_NAME can also be set in CircleCI settings or hardcoded here.
            cf api https://api.fr.cloud.gov
            cf auth "$DEV_CF_USERNAME" "$DEV_CF_PASSWORD"
            cf target -o "$DEV_CF_ORG" -s "$DEV_CF_SPACE"
            cf push -f preview.manifest.yml
  preview-onrr-frontend:
    working_directory: ~/onrr.gov-site/frontend
    docker:
      - image: cimg/node:16.16
    steps:
      - checkout:
          path: ~/onrr.gov-site
      - node/install-packages

      - run: 
          name: Build app
          command: |
            cp nginx.conf.preview nginx.conf
            npm run staging 
          
      - run: 
          name: Deploy to cloud.gov
          command: |
            pwd && ls -l
            printenv
            curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&source=github'
            sudo dpkg -i cf-cli_amd64.deb  
            # Set $CF_USERNAME and $CF_PASSWORD in CircleCI settings.
            # $CF_ORG, $CF_SPACE, and $APP_NAME can also be set in CircleCI settings or hardcoded here.
            cf api https://api.fr.cloud.gov
            cf auth "$DEV_CF_USERNAME" "$DEV_CF_PASSWORD"
            cf target -o "$DEV_CF_ORG" -s "$DEV_CF_SPACE"
            #cf push -f preview.manifest.yml
  prod-onrr-frontend:
    working_directory: ~/onrr.gov-site/frontend
    docker:
      - image: cimg/node:16.16
    steps:
      - checkout:
          path: ~/onrr.gov-site
      - node/install-packages

      - run: 
          name: Build app
          command: |
            cp nginx.conf.prod nginx.conf
            npm run production
          
      - run: 
          name: Deploy to cloud.gov
          command: |
            pwd && ls -l
            printenv
            curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&source=github'
            sudo dpkg -i cf-cli_amd64.deb  
            # Set $CF_USERNAME and $CF_PASSWORD in CircleCI settings.
            # $CF_ORG, $CF_SPACE, and $APP_NAME can also be set in CircleCI settings or hardcoded here.
            cf api https://api.fr.cloud.gov
            cf auth "$PROD_CF_USERNAME" "$PROD_CF_PASSWORD"
            cf target -o "$PROD_CF_ORG" -s "$PROD_CF_SPACE"
            cf push -f ./prod.manifest.yml


  onrr-database:
    docker:
      - image: cimg/postgres:13.7
    steps:
      - checkout
      - run:
          name: "Update OS"
          command: sudo apt-get update
      - run:
          name: "dump dev db "
          command: |
            cd database
            curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&source=github'
            sudo dpkg -i cf-cli_amd64.deb 
            cf api https://api.fr.cloud.gov
            echo "$DEV_CF_USERNAME"
            cf auth "$DEV_CF_USERNAME" "$DEV_CF_PASSWORD"
            cf target -o "$DEV_CF_ORG" -s dev
            cf apps
            cf install-plugin -f https://github.com/cloud-gov/cf-service-connect/releases/download/1.1.0/cf-service-connect-linux-amd64
            bash tunnel.sh dev-onrr-psql dev-onrr-cms
            echo "dump dev databse"
            source ../../.tunnelrc
            pg_dump --user=$Username --host=$Host --port=$Port --dbname=$Name --verbose --no-acl --no-owner -Fc > /tmp/onrr_database_backup.pg | echo $s?

      - run:
          name: "restore prod db "
          command: |
            cd database
            cf api https://api.fr.cloud.gov
            printenv
            echo "foo"
            echo "$CF_USERNAME"
            cf auth "$CF_USERNAME" "$CF_PASSWORD"
            cf target -o "$DEV_CF_ORG" -s prod
            bash tunnel.sh onrr-psql prod-onrr-cms
            echo "restore dev databse to prod"
            source ../../.tunnelrc
            pg_restore --user=$Username --host=$Host --port=$Port --clean  --no-owner --no-acl --dbname=$Name --no-password /tmp/onrr_database_backup.pg || echo $?
            echo "Database copied to production"
            echo "rebuild production site"
    
      - store_artifacts:
          path: /tmp/onrr_database_backup.pg
          destination: onrr_database_backup.pg


  update-cms:
    docker:
      - image: cimg/node:16.13
    steps:
      - checkout
      - run:
          name: Update cms and deploy to cloud.gov
          command: |
            cd cms
            curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&source=github'
            sudo dpkg -i cf-cli_amd64.deb  
            # Set $CF_USERNAME and $CF_PASSWORD in CircleCI settings.
            # $CF_ORG, $CF_SPACE, and $APP_NAME can also be set in CircleCI settings or hardcoded here.
            cf api https://api.fr.cloud.gov
            cf auth "$DEV_CF_USERNAME" "$DEV_CF_PASSWORD"
            cf target -o "$DEV_CF_ORG" -s "$DEV_CF_SPACE"
            cf push dev-onrr-cms

workflows:
  build:
    jobs:
      - dev-onrr-frontend:
          filters:
            branches:
              only:
                - dev
      - onrr-database:
          context:
            - PROD
          filters:
            branches:
              only:
                - main
      - prod-onrr-frontend:
          context:
            - PROD
          filters:
            branches:
              only:
                - main
  cms_updates:
    when: << pipeline.parameters.run_cms_updates >>
    jobs:
      - update-cms